--- uClibc/libcrypt/sha256.c.orig	2012-05-15 03:20:09.000000000 -0400
+++ uClibc/libcrypt/sha256.c	2013-06-21 15:51:10.338297010 -0400
@@ -119,18 +119,18 @@ sha256_process_block (const void *buffer
       /* It is unfortunate that C does not provide an operator for
 	 cyclic rotation.  Hope the C compiler is smart enough.  */
 #define CYCLIC(w, s) ((w >> s) | (w << (32 - s)))
-
+	unsigned int t;
       /* Compute the message schedule according to FIPS 180-2:6.2.2 step 2.  */
-      for (unsigned int t = 0; t < 16; ++t)
+      for (t = 0; t < 16; ++t)
 	{
 	  W[t] = SWAP (*words);
 	  ++words;
 	}
-      for (unsigned int t = 16; t < 64; ++t)
+      for (t = 16; t < 64; ++t)
 	W[t] = R1 (W[t - 2]) + W[t - 7] + R0 (W[t - 15]) + W[t - 16];
 
       /* The actual computation according to FIPS 180-2:6.2.2 step 3.  */
-      for (unsigned int t = 0; t < 64; ++t)
+      for (t = 0; t < 64; ++t)
 	{
 	  uint32_t T1 = h + S1 (e) + Ch (e, f, g) + K[t] + W[t];
 	  uint32_t T2 = S0 (a) + Maj (a, b, c);
@@ -218,8 +218,9 @@ __sha256_finish_ctx (struct sha256_ctx *
   /* Process last bytes.  */
   sha256_process_block (ctx->buffer, bytes + pad + 8, ctx);
 
+unsigned int i;
   /* Put result from CTX in first 32 bytes following RESBUF.  */
-  for (unsigned int i = 0; i < 8; ++i)
+  for (i = 0; i < 8; ++i)
     ((uint32_t *) resbuf)[i] = SWAP (ctx->H[i]);
 
   return resbuf;
